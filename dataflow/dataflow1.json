{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movieinput",
						"type": "DatasetReference"
					},
					"name": "Movieinput"
				},
				{
					"dataset": {
						"referenceName": "Movieinput",
						"type": "DatasetReference"
					},
					"name": "Movieinput1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Movieoutput",
						"type": "DatasetReference"
					},
					"name": "Movieoutput"
				},
				{
					"dataset": {
						"referenceName": "Movieoutput",
						"type": "DatasetReference"
					},
					"name": "Movieoutputwithoutgener"
				}
			],
			"transformations": [
				{
					"name": "YearExtract"
				},
				{
					"name": "selecttitle"
				},
				{
					"name": "YearExtraction"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Movieinput",
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Movieinput1",
				"Movieinput derive(Year = toInteger(trim(right(title,6),'()')),",
				"          title = toString(left(title,length(title)-6))) ~> YearExtract",
				"Movieinput1 select(mapColumn(",
				"          movieId,",
				"          title",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecttitle",
				"selecttitle derive(Year = toInteger(trim(right(title,6),'()')),",
				"          title = toString(left(title,length(title)-6))) ~> YearExtraction",
				"YearExtract sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MoviesFinal.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Movieoutput",
				"YearExtraction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Moviewithoutgener'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Movieoutputwithoutgener"
			]
		}
	}
}